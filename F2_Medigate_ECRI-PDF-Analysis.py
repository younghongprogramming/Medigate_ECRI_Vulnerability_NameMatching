"""""
Writer: Young Hong
Department: LMBME Clinical Engineering, Vancouver, BC, Canada
Data_Last_Updated: March 8, 2023

Project:
1. Get list of accesion number from the text file
2. Create a dataframe with accession number on excel sheet
3. Perform PDF Analysis

"""""

## Library Used ##
from PyPDF2 import PdfReader
import pandas as pd
import openpyxl
import os
import os.path
from os import path
import pdfplumber


## File Path ##
txt_file_path = '/Users/younghong/Documents/Files/Original_Acc_Num.txt'
excel_file_path = '/Users/younghong/Documents/Files/Data_Frame.xlsx'

## Functions ##

## Function - get accession number from the text file
def Get_Acc_Num(file_path):
    with open(file_path, 'r') as f:
        list_num = f.read().splitlines()
        f.close()
    return list_num

## Function - create index name. Number of index number = length of the accesion number
def Create_Index_Name(list):
    length = len(list)
    index_name = []
    for i in range(1, length+1):
        index = f'Row {i}'
        index_name.append(index)

    return index_name

## Functions - Check if there is an existing file
def Check_Existing_Files(file_address):
    check = path.exists(file_address)
    if check:
        return True
    else:
        return False

## Functions - Get PDF File names
def Get_File_Names(list_Acc_Num, file_extension_1, file_extension_2):
    All_PDF_Files = []
    for directory in list_Acc_Num:
        dir_path = f'/Users/younghong/Documents/Files/{directory}'
        All_files = os.listdir(dir_path)

        files = []
        for files_from_folder in All_files:
            if file_extension_1 in files_from_folder:
                files.append(files_from_folder)
            elif file_extension_2 in files_from_folder:
                files.append(files_from_folder)
            else:
                pass

        file_name = []
        for name in files:
            file_name.append(name.replace(file_extension_1, ''))

        All_PDF_Files.append(file_name)
    return All_PDF_Files

def PDFtoText(pdf_file_name, list_acc_num):
    i = 0
    for directory in list_acc_num:
        print (i)
        for file_name in pdf_file_name[i]:
            file_address = f'/Users/younghong/Documents/Files/{directory}/Pdf_to_Text_{file_name}.txt'
            check = Check_Existing_Files(file_address)
            if check:
                print("no need to create txt file")
                pass
            else:
                try:
                    """""
                    # If I want to use pyPDF2, use the following code below #
                    pdf = PdfReader(f'/Users/younghong/Documents/Files/{directory}/{file_name}.pdf')
                    with open(f'/Users/younghong/Documents/Files/{directory}/Pdf_to_Text_{file_name}.txt', 'w', encoding="utf-8") as f:
                            for num in range(len(pdf.pages)):
                                pdf_Obj = pdf.pages[num]
                                txt = pdf_Obj.extract_text()
                                f.write(txt)
                            f.close()
                    """""
                    with pdfplumber.open(f'/Users/younghong/Documents/Files/{directory}/{file_name}.pdf') as pdf:
                        with open(f'/Users/younghong/Documents/Files/{directory}/Pdf_to_Text_{file_name}.txt', 'w', encoding="utf-8") as f:
                            for num in range(len(pdf.pages)):
                                pdf_Obj = pdf.pages[num]
                                txt = pdf_Obj.extract_text()
                                f.write(txt)
                            f.close()
                    pdf.close()
                except:
                    pass
        i = i+1

def openTextFile(text_file):
    with open(text_file, 'r', encoding="utf-8") as f:
        text_1 = f.read().splitlines()
    f.close()
    return text_1

def joinFunction(text):
    join = "".join(text)
    return join

def capitalize(text):
    capital = text.upper()
    return capital

def remove_character(original_text):
    text = original_text
    remove_char = [' ', ',', '.', '/', '<', '>', '?', ';', "'", ':', '"', '[', ']', '{', '}', "|", '=', '+', '_', '!', '@', '#', '$', "%", '^', '&', '*', '(', ')', '~', '`']
    for char in remove_char:
        clean_char = text.replace(char, "")
        text = clean_char
    return clean_char

def addSpace(text, keyword):
    add_space = text.replace(f"{keyword}", f" {keyword}")
    return add_space

def splitSentence(text):
    split = text.split(" ")
    return split

def filterWord(text, keyword):
    filtered_text = []
    for sentence in text:
        if keyword in sentence:
            filtered_text.append(sentence)
        else:
            pass
    return filtered_text

def findVulNumber(text, length):
    list_vul_num = []
    for sentence in text:
        StrToChar = list(sentence)
        actual_num = StrToChar[:length]
        join = joinFunction(actual_num)
        list_vul_num.append(join)
    return list_vul_num

def flattenList(list):
    flat_list=[]
    for sublist in list:
        for item in sublist:
            flat_list.append(item)
    return flat_list

def remove_repeated_words(old_list):

    unique_list = []

    for list in old_list:
        if list not in unique_list:
                unique_list.append(list)
        #unique_list.append(new_list)

    return unique_list

## Function - perform pdf analysis. Will use some functions created above
def PDF_Analysis(text_file_names, list_acc_num, keywords, templates):
    i = 0
    for directory in list_acc_num:
        for file_name in text_file_names[i]:
            file_address = f'/Users/younghong/Documents/Files/{directory}/{file_name}.txt'

            #read text from text file
            text_1 = openTextFile(file_address)

            #Convert from list of lines to string
            join_list = joinFunction(text_1)

            #Convert all letter to capital letter
            upper = capitalize(join_list)

            #Remove all unnecessary characters
            clean_text = remove_character(upper)

            #Get ICSMA and CVE numbers
            z = 0
            vul_names = []
            for key in keywords:
                add_space = addSpace(clean_text, key)
                split_sentence = splitSentence(add_space)
                filtered_keyword = filterWord(split_sentence, key)
                vul_name = findVulNumber(filtered_keyword, len(templates[z]))
                vul_names.append(vul_name)
                z = z+1

            #Flatten the list
            flatten_vul_names = flattenList(vul_names)

            #Remove repeated vul names
            final_vul_names = remove_repeated_words(flatten_vul_names)

            with open(f'/Users/younghong/Documents/Files/{directory}/{file_name}_Vul_Name.txt', 'w', encoding="utf-8") as x:
                for num in final_vul_names:
                    x.write(num)
                    x.write('\n')
            x.close()

        i = i+1

## Main ##

# Get List of Accession Number from the text file #
list_Acc_Num = Get_Acc_Num(txt_file_path)

# Create index name using the list of accession number
index_names = Create_Index_Name(list_Acc_Num)

# Create dataframe using the index_names and export as an excel file
df1 = pd.DataFrame(list_Acc_Num, index=index_names, columns=['Accession Number'])
df1.to_excel(excel_file_path, sheet_name="ECRI_Accession_Number")

# Get all PDF File names using the list of accession number
PDF_Files_Name = Get_File_Names(list_Acc_Num, '.pdf', '.PDF')

#### Perform PDF Analysis ####
## input - keyword, list of accession number, pdf file names
keyword = ['ICSMA', 'CVE', 'CVE']
template = ['ICSMA-XX-XXX-XX', 'CVE-XXXX-XXXXX', 'CVE-XXXX-XXXX']

# Convert from PDF to Text File
PDFtoText(PDF_Files_Name, list_Acc_Num)

# Get all text fill names using the list of accession number
TEXT_Files_Name = Get_File_Names(list_Acc_Num, '.txt', '.TXT')

# PDF Analysis
PDF_Analysis(TEXT_Files_Name, list_Acc_Num, keyword, template)

